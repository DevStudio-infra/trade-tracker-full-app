import { NextRequest, NextResponse } from 'next/server';
import { getAuth } from '@clerk/nextjs/server';

// Get the backend URL from environment variables or use default
const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:5000';

/**
 * POST handler for toggling bot active state
 */
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = params.id;
    
    // Handle authentication - with dev mode fallback
    let userId: string | null = null;
    
    try {
      // Try to get auth from Clerk
      const auth = getAuth(request);
      userId = auth.userId;
    } catch (authError) {
      // In development, bypass auth errors
      if (process.env.NODE_ENV === 'development') {
        console.log('Development mode: Bypassing Clerk authentication');
        userId = 'dev-user-id';
      } else {
        throw authError; // Re-throw in production
      }
    }
    
    if (!userId) {
      console.error('Unauthorized access attempt to toggle bot active state');
      return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
    }

    // Get request headers for authentication
    const authHeader = request.headers.get('authorization');
    console.log(`[Bot API] Toggle active request for bot ${id}, headers:`, { auth: authHeader ? 'Present' : 'Missing' });

    // Forward request to backend
    console.log(`[Bot API] Forwarding toggle active request to backend: ${BACKEND_URL}/api/v1/bots/${id}/toggle-active`);
    
    const response = await fetch(`${BACKEND_URL}/api/v1/bots/${id}/toggle-active`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...(authHeader ? { 'Authorization': authHeader } : {})
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
      console.error(`[Bot API] Error toggling bot ${id} active state:`, errorData);
      return NextResponse.json(
        { success: false, message: errorData.message || 'Failed to toggle bot active state' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error: any) {
    console.error('Error in toggle bot active endpoint:', error);
    return NextResponse.json(
      { success: false, message: error.message || 'Internal server error' },
      { status: 500 }
    );
  }
}
