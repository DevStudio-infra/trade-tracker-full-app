// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User schema
enum Role {
  admin
  staff
}

model User {
  id                      Int                @id @default(autoincrement())
  name                    String
  email                   String             @unique
  role                    Role               @default(staff)
  createdAt               DateTime           @default(now()) @map("created_at")
  updatedAt               DateTime           @default(now()) @map("updated_at")
  adminId                 Int?               @map("admin_id")
  admin                   User?              @relation("AdminToStaff", fields: [adminId], references: [id])
  staff                   User[]             @relation("AdminToStaff")
  // References
  recipes                 Recipe[]
  createdMenus            Menu[]
  menuNotes               MenuNote[]
  conversations           Conversation[]
  contextSources          ContextSource[]
  messages                Message[]
  schedules               Schedule[]
  shifts                  Shift[]
  timeOffRequests         TimeOffRequest[]
  approvedTimeOffRequests TimeOffRequest[]   @relation("ApprovedBy")
  scheduleTemplates       ScheduleTemplate[]
  recipeComments          RecipeComment[]
  clerkId                 String?            @unique

  @@map("users")
}

// Recipe schema
model Recipe {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  instructions      String
  prepTime          Int?               @map("prep_time")
  cookTime          Int?               @map("cook_time")
  servings          Int?
  createdBy         Int                @map("created_by")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @map("updated_at")
  // Relations
  user              User               @relation(fields: [createdBy], references: [id])
  recipeIngredients RecipeIngredient[]
  recipeTags        RecipeTag[]
  recipeComments    RecipeComment[]
  menuItems         MenuItem[]

  @@map("recipes")
}

model Ingredient {
  id                Int                @id @default(autoincrement())
  name              String
  unit              String?
  category          String?
  // Relations
  recipeIngredients RecipeIngredient[]

  @@map("ingredients")
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipeId     Int        @map("recipe_id")
  ingredientId Int        @map("ingredient_id")
  quantity     Float
  unit         String?
  notes        String?
  // Relations
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@map("recipe_ingredients")
}

model RecipeTag {
  id       Int    @id @default(autoincrement())
  recipeId Int    @map("recipe_id")
  tag      String
  // Relations
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("recipe_tags")
}

model RecipeComment {
  id        Int      @id @default(autoincrement())
  recipeId  Int      @map("recipe_id")
  userId    Int      @map("user_id")
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  // Relations
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("recipe_comments")
}

// Menu schema
model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean    @default(true) @map("is_active")
  createdBy   Int        @map("created_by")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  // Relations
  user        User       @relation(fields: [createdBy], references: [id])
  menuItems   MenuItem[]
  menuNotes   MenuNote[]

  @@map("menus")
}

model MenuItem {
  id          Int        @id @default(autoincrement())
  menuId      Int        @map("menu_id")
  name        String
  description String?
  price       Float
  category    String?
  recipeId    Int?       @map("recipe_id")
  dietaryInfo String?    @map("dietary_info")
  isAvailable Boolean    @default(true) @map("is_available")
  // Relations
  menu        Menu       @relation(fields: [menuId], references: [id])
  recipe      Recipe?    @relation(fields: [recipeId], references: [id])
  menuNotes   MenuNote[]

  @@map("menu_items")
}

model MenuNote {
  id         Int       @id @default(autoincrement())
  menuId     Int       @map("menu_id")
  menuItemId Int?      @map("menu_item_id")
  note       String
  createdBy  Int       @map("created_by")
  createdAt  DateTime  @default(now()) @map("created_at")
  // Relations
  menu       Menu      @relation(fields: [menuId], references: [id])
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  user       User      @relation(fields: [createdBy], references: [id])

  @@map("menu_notes")
}

// Schedule schema
enum ShiftStatus {
  pending
  approved
  rejected
}

model Schedule {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  // Relations
  user        User     @relation(fields: [createdBy], references: [id])
  shifts      Shift[]

  @@map("schedules")
}

model Shift {
  id         Int      @id @default(autoincrement())
  scheduleId Int      @map("schedule_id")
  userId     Int      @map("user_id")
  role       String
  startTime  DateTime @map("start_time")
  endTime    DateTime @map("end_time")
  notes      String?
  // Relations
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("shifts")
}

model TimeOffRequest {
  id         Int         @id @default(autoincrement())
  userId     Int         @map("user_id")
  startDate  DateTime    @map("start_date")
  endDate    DateTime    @map("end_date")
  reason     String?
  status     ShiftStatus @default(pending)
  approvedBy Int?        @map("approved_by")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @map("updated_at")
  // Relations
  user       User        @relation(fields: [userId], references: [id])
  approver   User?       @relation("ApprovedBy", fields: [approvedBy], references: [id])

  @@map("time_off_requests")
}

model ScheduleTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  content     String
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  // Relations
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("schedule_templates")
}

// Chat schema
model Conversation {
  id        Int                   @id @default(autoincrement())
  title     String
  createdBy Int                   @map("created_by")
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @default(now()) @map("updated_at")
  // Relations
  user      User                  @relation(fields: [createdBy], references: [id])
  messages  Message[]
  contexts  ConversationContext[]

  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int          @map("conversation_id")
  userId         Int?         @map("user_id")
  role           String // 'user', 'system', 'assistant'
  content        String
  createdAt      DateTime     @default(now()) @map("created_at")
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])

  @@map("messages")
}

model ContextSource {
  id          Int                   @id @default(autoincrement())
  name        String
  description String?
  content     String
  metadata    Json?
  createdBy   Int                   @map("created_by")
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @map("updated_at")
  // Relations
  user        User                  @relation(fields: [createdBy], references: [id])
  contexts    ConversationContext[]

  @@map("context_sources")
}

model ConversationContext {
  id              Int           @id @default(autoincrement())
  conversationId  Int           @map("conversation_id")
  contextSourceId Int           @map("context_source_id")
  // Relations
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  contextSource   ContextSource @relation(fields: [contextSourceId], references: [id])

  @@map("conversation_contexts")
}
