generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// NextAuth required models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id                     String                @id @default(uuid())
    email                  String                @unique
    emailVerified          DateTime?
    name                   String?
    image                  String?
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt
    role                   UserRole              @default(USER)
    hasSeenWelcome         Boolean               @default(false)
    hasAcceptedToS         Boolean               @default(false)
    hasAcceptedPrivacy     Boolean               @default(false)
    hasCompletedOnboarding Boolean               @default(false)
    accounts               Account[]
    sessions               Session[]
    subscription           Subscription?
    apiKeys                ApiKey[]
    credits                Int                   @default(6) // Free tier starts with 6 credits
    lastCreditRecharge     DateTime?
    emailTracking          EmailTracking[]
    creditTransactions     CreditTransaction[]
    creditPurchases        CreditPurchase[]
    AnalysisSession        AnalysisSession[]
    RagFeedback            RagFeedback[]
    KnowledgeBaseMetric    KnowledgeBaseMetric[]

    @@map("users")
}

model Subscription {
    id                   String             @id @default(uuid())
    userId               String             @unique
    user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    plan                 Plan               @default(FREE)
    status               SubscriptionStatus @default(ACTIVE)
    startDate            DateTime           @default(now())
    endDate              DateTime?
    stripeCustomerId     String?
    stripeSubscriptionId String?
    monthlyCredits       Int                @default(6) // Credits allocated monthly
    extraCreditPrice     Float              @default(0.22) // Price per extra credit
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt

    @@map("subscriptions")
}

model ApiKey {
    id        String    @id @default(cuid())
    userId    String
    name      String
    key       String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    lastUsed  DateTime?
    expiresAt DateTime?
    user      User      @relation(fields: [userId], references: [id])

    @@index([userId])
}

model EmailTracking {
    id         String    @id @default(uuid())
    userId     String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    trackingId String    @unique
    emailType  String
    metadata   Json      @default("{}")
    opened     Boolean   @default(false)
    sentAt     DateTime  @default(now())
    openedAt   DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@index([userId])
    @@index([trackingId])
    @@index([emailType])
    @@index([sentAt])
    @@map("email_tracking")
}

// New model for trading strategies with vector search
model TradingStrategy {
    id          String   @id @default(uuid())
    name        String
    description String   @db.Text
    rules       String   @db.Text
    embedding   Json?    @db.JsonB // Store vector as JSON array
    metadata    Json     @default("{}") @db.JsonB
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("trading_strategies")
}

// New models for AI credits system
model CreditTransaction {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount    Int // Negative for usage, positive for recharge/purchase
    operation String // e.g., "SIGNAL_DETECTION", "SIGNAL_CONFIRMATION"
    metadata  Json     @default("{}")
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([operation])
    @@index([createdAt])
    @@map("credit_transactions")
}

model CreditPurchase {
    id              String         @id @default(uuid())
    userId          String
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount          Int // Number of credits purchased
    cost            Float // Cost in euros
    stripePaymentId String?
    status          PurchaseStatus @default(PENDING)
    createdAt       DateTime       @default(now())
    completedAt     DateTime?

    @@index([userId])
    @@index([status])
    @@index([createdAt])
    @@map("credit_purchases")
}

model AnalysisSession {
    id        String     @id @default(uuid())
    userId    String
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    analyses  Analysis[]
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("analysis_sessions")
}

model Analysis {
    id        String          @id @default(uuid())
    sessionId String
    type      String
    prompt    String          @db.Text
    image     String          @db.Text
    result    Json
    createdAt DateTime        @default(now())
    session   AnalysisSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@index([sessionId])
    @@map("analyses")
}

model NewsletterSubscriber {
    id        String   @id @default(uuid())
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("newsletter_subscribers")
}

model KnowledgeBaseItem {
    id        String                @id @default(uuid())
    title     String
    content   String                @db.Text
    metadata  Json                  @default("{}")
    embedding Json?                 @db.JsonB
    tags      String[]
    createdAt DateTime              @default(now())
    updatedAt DateTime              @updatedAt
    feedback  RagFeedback[]
    metrics   KnowledgeBaseMetric[]

    @@map("knowledge_base_items")
}

model RagFeedback {
    id         String            @id @default(uuid())
    itemId     String
    userId     String
    query      String            @db.Text
    response   String            @db.Text
    isRelevant Boolean
    feedback   String?           @db.Text
    metadata   Json              @default("{}")
    createdAt  DateTime          @default(now())
    item       KnowledgeBaseItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
    user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([itemId])
    @@index([userId])
    @@map("rag_feedback")
}

model KnowledgeBaseMetric {
    id        String            @id @default(uuid())
    itemId    String
    userId    String
    action    String
    metadata  Json              @default("{}")
    timestamp DateTime          @default(now())
    item      KnowledgeBaseItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
    user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([itemId])
    @@index([userId])
    @@index([action])
    @@map("knowledge_base_metrics")
}

enum UserRole {
    USER
    ADMIN
}

enum Plan {
    FREE
    PRO
}

enum SubscriptionStatus {
    ACTIVE
    CANCELLED
    EXPIRED
}

enum Platform {
    CAPITAL
    BINANCE
    COINBASE
}

enum PurchaseStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}
